name: Deploy to Raspberry Pi

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run syntax checks
      run: |
        python -m py_compile bot.py
        python -m py_compile src/*.py
        find src -name "*.py" -exec python -m py_compile {} \;
        
    - name: Test database initialization
      run: |
        python -c "
        import os
        os.environ['TOKEN'] = 'dummy_token'
        os.environ['GEMINI_API_KEY'] = 'dummy_key'
        from src.database import DatabaseManager
        import asyncio
        async def test():
            db = DatabaseManager(':memory:')
            await db.initialize()
            await db.close()
        asyncio.run(test())
        print('Database test passed!')
        "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Raspberry Pi
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PI_HOST }}
        username: ${{ secrets.PI_USERNAME }}
        password: ${{ secrets.PI_PASSWORD }}
        port: ${{ secrets.PI_PORT || 22 }}
        script: |
          # Navigate to the bot directory
          cd ${{ secrets.PI_BOT_PATH || '/home/skula/Sir-Tim-the-Timely' }}
          
          # Stop the bot service if it's running
          if systemctl --user is-active --quiet sir-tim-bot; then
            echo "Stopping Sir Tim bot service..."
            systemctl --user stop sir-tim-bot
          fi
          
          # Backup current version
          if [ -d "backup" ]; then rm -rf backup; fi
          mkdir -p backup
          cp -r src bot.py main.py requirements.txt backup/ 2>/dev/null || true
          
          # Pull latest changes
          echo "Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          
          # Install/update dependencies
          echo "Installing dependencies..."
          python3 -m pip install --user -r requirements.txt
          
          # Run database migrations if needed
          echo "Checking database..."
          python3 -c "
          import os
          import asyncio
          from src.database import DatabaseManager
          async def migrate():
              db = DatabaseManager('./data/deadlines.db')
              await db.initialize()
              await db.close()
          asyncio.run(migrate())
          " || echo "Database check completed"
          
          # Restart the bot service
          echo "Starting Sir Tim bot service..."
          systemctl --user start sir-tim-bot
          
          # Check if service started successfully
          sleep 5
          if systemctl --user is-active --quiet sir-tim-bot; then
            echo "✅ Sir Tim deployment successful!"
            systemctl --user status sir-tim-bot --no-pager
          else
            echo "❌ Service failed to start, rolling back..."
            cp -r backup/* . 2>/dev/null || true
            systemctl --user start sir-tim-bot
            exit 1
          fi
